name: Deploy Green to GA

on:
  workflow_dispatch:

permissions:
  id-token: write   # Needed for OIDC
  contents: read    # Needed to clone repos and read GitHub contents

jobs:
  deploy-green:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          repository: "TiansiGu/JobFitChecker-Infra"
          path: "infra"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update kubectl config for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ secrets.CLUSTER_NAME}}
          kubectl config current-context

      - name: Clean up UAT deployments
        run: |
          kubectl delete all --all -n uat


      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Make helper scripts executable
        run: chmod +x infra/scripts/*.sh

      - name: Compare image tags, identify updated services, and re-tag to pre-ga
        run: |
          BLUE_GREEN_FLAG="false"
          for svc in frontend app postprocessor; do
            REPO_NAME="${{ secrets.ECR_REPO_NAMESPACE }}/$svc"

            # Get the latest uat tags
            LATEST_TAG_UAT=$(infra/scripts/get-latest-tag.sh \
              "$REPO_NAME" \
              "$AWS_REGION" \
              "${{ secrets.AWS_ACCOUNT_ID }}" \
              uat)

            # Get the latest pre-ga tags
            LATEST_TAG_PRE_GA=$(infra/scripts/get-latest-tag.sh \
              "$REPO_NAME" \
              "$AWS_REGION" \
              "${{ secrets.AWS_ACCOUNT_ID }}" \
              pre-ga)
            
            # Export the next desired version (not mean it will necesarily be deployed again)
            VERSION_NAME=$(echo "${svc}_VERSION" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            DNS_VERSION=$(echo "$LATEST_TAG_UAT" | tr '.' '-')
            echo "${VERSION_NAME}=${DNS_VERSION}" >> "$GITHUB_ENV"
            echo "Set ${VERSION_NAME}=${DNS_VERSION}"

            BLUE_GREEN_SVC_FLAG="false"
            if [ "$LATEST_TAG_PRE_GA" = "none" ]; then
              echo " 🆕 PRE_GA tag does not exist, will add."
              NEW_TAG="${LATEST_TAG_UAT}-pre-ga"
            elif [ "$LATEST_TAG_PRE_GA" != "$LATEST_TAG_UAT" ] && [ "$(printf "%s\n%s" "$LATEST_TAG_PRE_GA" "$LATEST_TAG_UAT" | sort -V | head -n1)" = "$LATEST_TAG_PRE_GA" ]; then
              echo " 🆕 $LATEST_TAG_PRE_GA is less than $LATEST_TAG_UAT, $svc was updated"
              NEW_TAG="${LATEST_TAG_UAT}-pre-ga"
              BLUE_GREEN_FLAG="true"
              BLUE_GREEN_SVC_FLAG="true"
            else
              echo "⏹️ $svc unchanged, skipping..."
              CUR_TAG="${LATEST_TAG_PRE_GA}-uat"
              VAR_NAME=$(echo "${svc}_TAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
              echo "${VAR_NAME}=${CUR_TAG}" >> "$GITHUB_ENV"
              echo "Set ${VAR_NAME}=${CUR_TAG}"
              # Export blue-green flag of this svc
              FLAG_NAME=$(echo "${svc}_FLAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
              echo "${FLAG_NAME}=${BLUE_GREEN_SVC_FLAG}" >> "$GITHUB_ENV"
              echo "Set ${FLAG_NAME}=${BLUE_GREEN_SVC_FLAG}"
              continue
            fi

            CUR_TAG="${LATEST_TAG_UAT}-uat"
            infra/scripts/retag-ecr-image.sh \
                "$REPO_NAME" \
                "$CUR_TAG" \
                "$NEW_TAG"

            # Export PRE_GA tags to GitHub Actions environment
            VAR_NAME=$(echo "${svc}_TAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            echo "${VAR_NAME}=${NEW_TAG}" >> "$GITHUB_ENV"
            echo "Set ${VAR_NAME}=${NEW_TAG}"
            
            # Export blue-green flag of this svc
            FLAG_NAME=$(echo "${svc}_FLAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            echo "${FLAG_NAME}=${BLUE_GREEN_SVC_FLAG}" >> "$GITHUB_ENV"
            echo "Set ${FLAG_NAME}=${BLUE_GREEN_SVC_FLAG}"
          
          done    
          # Export blue-green flag to env
          echo "BLUE_GREEN_FLAG=${BLUE_GREEN_FLAG}" >> "$GITHUB_ENV"

      - name: Deploy All to GA if not exist
        working-directory: infra/k8s
        run: |
          if [ "$FRONTEND_VERSION" == "v1-0-0" ]; then
            export STAGE=ga
            export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            export SUB_DOMAIN=ga
            export INGRESS_RULE_NAME=ingress-blue

            envsubst < service-account.yaml | kubectl apply -f -

            envsubst < frontend-deployment.yaml | kubectl apply -f -
            envsubst < app-deployment.yaml | kubectl apply -f -
            envsubst < postprocessor-deployment.yaml | kubectl apply -f -
            kubectl rollout status deployment/frontend-deployment-${FRONTEND_VERSION} -n $STAGE --timeout=60s
            kubectl rollout status deployment/app-deployment-${APP_VERSION} -n $STAGE --timeout=60s
            kubectl rollout status deployment/postprocessor-deployment-${POSTPROCESSOR_VERSION} -n $STAGE --timeout=60s

            envsubst < frontend-service.yaml | kubectl apply -f -
            envsubst < app-service.yaml | kubectl apply -f -

            envsubst < ingress.yaml | kubectl apply -f -

            echo "✅ Deployed all services v.1.0.0 to ga"
          fi

      - name: Add Green Deployment and its Service to Cluster
        working-directory: infra/k8s
        run: |
          for svc in frontend app postprocessor; do
            FLAG_VAR=$(echo "${svc}_FLAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            FLAG=$(printenv "$FLAG_VAR")
  
            if [ "$FLAG" = "true" ]; then
              echo "🆕 Deploying $svc green deployment and ClusterIP..."
              export STAGE=ga
              envsubst < $svc-deployment.yaml | kubectl apply -f -
              
              VERSION_VAR=$(echo "${svc}_VERSION" | tr '[:lower:]' '[:upper:]')
              VERSION=${!VERSION_VAR}
              kubectl rollout status deployment/$svc-deployment-$VERSION -n $STAGE --timeout=60s
              if [ "$svc" != "postprocessor" ]; then
                envsubst < $svc-service.yaml | kubectl apply -f -
              fi
            else
              echo "⏹️ $svc has no new change to deploy, skipping..."
            fi
          done

      - name: Add Green Ingress Routing Resource to Cluster if there is any service update
        working-directory: infra/k8s
        run: |
          if [ "$BLUE_GREEN_FLAG" == "true" ]; then
            echo "🆕 Adding green ingress..."
            export STAGE=ga
            export SUB_DOMAIN=green
            export INGRESS_RULE_NAME=ingress-green
            envsubst < ingress.yaml | kubectl apply -f -
          else
            echo "⏹️ No need to add green ingress, skipping..."
          fi