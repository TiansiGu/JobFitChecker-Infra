name: Deploy to UAT

on:
  workflow_dispatch:

permissions:
  id-token: write   # Needed for OIDC
  contents: read    # Needed to clone repos and read GitHub contents

jobs:
  deploy-uat:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          repository: "TiansiGu/JobFitChecker-Infra"
          path: "infra"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.3

      - name: Destroy QA EC2
        run: |
          cd infra/terraform/qa
          terraform init
          terraform destroy -auto-approve

      - name: Launch resources for UAT (S3, SQS)
        run: |
          cd infra/terraform/uat
          terraform init
          terraform apply -auto-approve
          
          S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)
          SQS_QUEUE_URL=$(terraform output -raw sqs_queue_url)
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
          echo "SQS_QUEUE_URL=$SQS_QUEUE_URL" >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Make helper scripts executable
        run: chmod +x infra/scripts/*.sh

      - name: Compare UAT image tags and Re-tag updated images
        run: |
          for svc in frontend app postprocessor; do
            REPO_NAME="${{ secrets.ECR_REPO_NAMESPACE }}/$svc"
            
            # Get the latest qa tags
            LATEST_TAG_QA=$(infra/scripts/get-latest-tag.sh \
              "$REPO_NAME" \
              "$AWS_REGION" \
              "${{ secrets.AWS_ACCOUNT_ID }}" \
              qa)
          
            # Get the latest uat tags
            LATEST_TAG_UAT=$(infra/scripts/get-latest-tag.sh \
              "$REPO_NAME" \
              "$AWS_REGION" \
              "${{ secrets.AWS_ACCOUNT_ID }}" \
              uat)
          
            # Export the next version to be deployed (always align with latest qa tag)
            VERSION_NAME=$(echo "${svc}_VERSION" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            DNS_VERSION=$(echo "$LATEST_TAG_QA" | tr '.' '-')
            echo "${VERSION_NAME}=${DNS_VERSION}" >> "$GITHUB_ENV"
            echo "Set ${VERSION_NAME}=${DNS_VERSION}"
            
            if [ "$LATEST_TAG_UAT" = "none" ]; then
              echo " 🆕 UAT tag does not exist, will add."
              NEW_TAG="${LATEST_TAG_QA}-uat"
            elif [ "$LATEST_TAG_UAT" != "$LATEST_TAG_QA" ] && [ "$(printf "%s\n%s" "$LATEST_TAG_UAT" "$LATEST_TAG_QA" | sort -V | head -n1)" = "$LATEST_TAG_UAT" ]; then
              echo " 🆕 $LATEST_TAG_UAT is less than $LATEST_TAG_QA, $svc was updated"
              NEW_TAG="${LATEST_TAG_QA}-uat"
            else
              echo "⏹️ $svc unchanged, skipping..."
              CUR_TAG="${LATEST_TAG_UAT}-uat"
              VAR_NAME=$(echo "${svc}_TAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
              echo "${VAR_NAME}=${CUR_TAG}" >> "$GITHUB_ENV"
              echo "Set ${VAR_NAME}=${CUR_TAG}"
              continue
            fi
            
            CUR_TAG="${LATEST_TAG_QA}-qa"
            infra/scripts/retag-ecr-image.sh \
                "$REPO_NAME" \
                "$CUR_TAG" \
                "$NEW_TAG"
          
            # Export UAT tags to GitHub Actions environment
            VAR_NAME=$(echo "${svc}_TAG" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            echo "${VAR_NAME}=${NEW_TAG}" >> "$GITHUB_ENV"
            echo "Set ${VAR_NAME}=${NEW_TAG}"
          done

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update kubectl config for EKS
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name ${{ secrets.CLUSTER_NAME}}
          kubectl config current-context

      - name: Deploy Service Account
        working-directory: infra/k8s
        run: |
          export STAGE=uat
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          echo "Deploying ServiceAccount..."
          envsubst < service-account.yaml | kubectl apply -f -
          echo "✅ ServiceAccount added: "
          kubectl get serviceaccount -n uat

      - name: Deploy Containers
        working-directory: infra/k8s
        run: |
          export STAGE=uat
          export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          echo "Deploying images..."
          echo "Frontend: $FRONTEND_TAG"
          envsubst < frontend-deployment.yaml | kubectl apply -f -
          echo "App: $APP_TAG"
          envsubst < app-deployment.yaml | kubectl apply -f -
          echo "Postprocessor: $POSTPROCESSOR_TAG"
          envsubst < postprocessor-deployment.yaml | kubectl apply -f -
          
          kubectl rollout status deployment/frontend-deployment-${FRONTEND_VERSION} -n $STAGE --timeout=30s
          kubectl rollout status deployment/app-deployment-${APP_VERSION} -n $STAGE --timeout=30s
          kubectl rollout status deployment/postprocessor-deployment-${POSTPROCESSOR_VERSION} -n $STAGE --timeout=30s
          
          echo "✅ Pods after deployment: "
          kubectl get pods -n uat

      - name: Deploy Services
        working-directory: infra/k8s
        run: |
          export STAGE=uat
          echo "Deploying Services..."
          envsubst < frontend-service.yaml | kubectl apply -f -
          envsubst < app-service.yaml | kubectl apply -f -
          echo "✅ Services added: "
          kubectl get services -n uat

      - name: Deploy Ingress
        working-directory: infra/k8s
        run: |
          export STAGE=uat
          export SUB_DOMAIN=uat
          export INGRESS_RULE_NAME=ingress-uat
          echo "Deploying Ingress..."
          envsubst < ingress.yaml | kubectl apply -f -
          echo "✅ Ingress routing rules added: "
          kubectl get ingress -n uat
