name: Nightly Build

on:
#  schedule:
#    - cron: "0 0 * * *"  # UTC
  workflow_dispatch:

permissions:
  id-token: write   # Needed for OIDC
  contents: read    # Needed to clone repos and read GitHub contents

jobs:
  nightly-build:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2

    steps:
      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: "TiansiGu/JobFitCheker-Source"
          path: "source"  # path in Ubuntu build machine
          ref: dev
          fetch-depth: 0

      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          repository: "TiansiGu/JobFitChecker-Infra"
          path: "infra"

      - name: Fetch main branch for comparison
        run: |
          cd source
          git fetch origin main

      - name: Detect changed services since last main
        run: |
          cd source
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)

          if echo "$CHANGED_FILES" | grep -q '^Jobfit-Checker-Frontend/'; then
            echo "FRONTEND_CHANGED=true" >> $GITHUB_ENV
          fi
          # repeat for other services
          
          if echo "$CHANGED_FILES" | grep -q '^JobFitCheckerApp/'; then
            echo "APP_CHANGED=true" >> $GITHUB_ENV
          fi
          
          if echo "$CHANGED_FILES" | grep -q '^ResumePostProcessor/'; then
            echo "PPW_CHANGED=true" >> $GITHUB_ENV
          fi

      - name: Log service changes   # for debugging
        run: |
          echo "frontend change: ${{ env.FRONTEND_CHANGED }}"
          echo "app change: ${{ env.APP_CHANGED }}"
          echo "ppw change: ${{ env.APP_CHANGED }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Make helper scripts executable
        run: chmod +x infra/scripts/*.sh

      - name: Build frontend Docker image if changed
        if: env.FRONTEND_CHANGED == 'true'
        run: docker build -t frontend source/Jobfit-Checker-Frontend/

      - name: Build app Docker image if changed
        if: env.APP_CHANGED == 'true'
        run: docker build -t app source/JobFitCheckerApp/

      - name: Build ppw Docker image if changed
        if: env.PPW_CHANGED == 'true'
        run: docker build -t postprocessor source/ResumePostProcessor/

      - name: Push new images to ECR
        run: |
          declare -A SERVICES=(
            [frontend]=$FRONTEND_CHANGED
            [app]=$APP_CHANGED
            [postprocessor]=$PPW_CHANGED
          )
          
          for SERVICE in "${!SERVICES[@]}"; do
            CHANGED=${SERVICES[$SERVICE]}
            if [ "$CHANGED" = "true" ]; then
              echo "üîÑ $SERVICE has changed, tagging and pushing..."
              
              # Get next ECR tag
              NEW_TAG=$(infra/scripts/get-next-qa-tag.sh \
              "${{ secrets.ECR_REPO_NAMESPACE }}/frontend" \
              "${{ env.AWS_REGION }}")
              
              echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
              echo "Tag for frontend: $NEW_TAG"
              
              # Tag and push to ECR
              infra/scripts/tag-and-push-image.sh \
              frontend \
              "$NEW_TAG" \
              "${{ secrets.ECR_REPO_NAMESPACE }}" \
              "${{ secrets.AWS_ACCOUNT_ID }}" \
              "${{ env.AWS_REGION }}"
            else
              echo "‚èπÔ∏è $SERVICE unchanged, skipping."
            fi     
          done
        env:
          FRONTEND_CHANGED: ${{ env.FRONTEND_CHANGED }}
          APP_CHANGED: ${{ env.APP_CHANGED }}
          PPW_CHANGED: ${{ env.PPW_CHANGED }}


